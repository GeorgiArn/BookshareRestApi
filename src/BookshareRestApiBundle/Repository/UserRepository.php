<?php

namespace BookshareRestApiBundle\Repository;

use BookshareRestApiBundle\Entity\Book;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\OptimisticLockException;
use BookshareRestApiBundle\Entity\User;
use Doctrine\ORM\ORMException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManagerInterface $em,
                                Mapping\ClassMetadata $metadata = null)
    {
        parent::__construct($em,
            $metadata == null ?
                new Mapping\ClassMetadata(User::class) :
                $metadata
        );
    }

    /**
     * @param User $user
     * @return bool
     */
    public function insert(User $user) {
        try {
            $this->_em->persist($user);
            $this->_em->flush ();
            return true;
        } catch ( OptimisticLockException $e ) {
            return false;
        } catch ( ORMException $e ) {
            return false;
        }
    }

    public function merge(User $user): bool
    {
        try {
            $this->_em->merge($user);
            $this->_em->flush();
            return true;
        } catch ( OptimisticLockException $e ) {
            return false;
        } catch ( ORMException $e ) {
            return false;
        }
    }

    public function findUserFavouriteSubcategories(User $user) {
        return $this
            ->createQueryBuilder('users_books')
            ->leftJoin('users_books.books', 'book')
            ->leftJoin('book.subcategory', 'subcategory')
            ->where('users_books.id = :id')
            ->groupBy('subcategory.subcategoryName')
            ->setParameter('id', $user->getId())
            ->orderBy('COUNT(subcategory.subcategoryName)', 'DESC')
            ->select('subcategory.subcategoryName')
            ->getQuery()
            ->getResult();
    }

    public function findUsersByBook(Book $book, User $currUser) {
        $queryBuilder = $this->_em->createQueryBuilder();
        $expr = $queryBuilder->expr();
        return $this
            ->createQueryBuilder('users_books')
            ->leftJoin('users_books.books', 'books')
            ->where('books.id = :bookId AND users_books.id != :userId')
            ->setParameter('bookId', $book->getId())
            ->setParameter('userId', $currUser->getId())
            ->getQuery()
            ->getResult();
    }
}
